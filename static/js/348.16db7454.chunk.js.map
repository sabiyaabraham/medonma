{"version":3,"file":"static/js/348.16db7454.chunk.js","mappings":"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","sources":["API/index.js","pages/Auth/Verify.js"],"sourcesContent":["const api = (function () {\n  const baseUrl = \"https://api.medonma.me/api/v1/\"; // Set your default API base URL\n\n  // Function to get the token from local storage\n  const getToken = () => {\n    return localStorage.getItem(\"token\");\n  };\n\n  // Function to make requests\n  const request = async (method, path, data) => {\n    var url = `${baseUrl}${path}`;\n    const token = getToken();\n    const headers = {\n      \"Content-Type\": \"application/json\",\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    let options = {\n      method,\n      headers,\n    };\n\n    if (method !== \"GET\") {\n      options.body = JSON.stringify(data);\n    } else if (data) {\n      // If it's a GET request and there are data, encode it to a URL string\n      const queryParams = new URLSearchParams(data).toString();\n      options = {\n        ...options,\n        method,\n        headers,\n      };\n      url = `${baseUrl}${path}?${queryParams}`;\n    }\n\n    try {\n      const response = await fetch(url, options);\n      return await response.json();\n    } catch (error) {\n      console.error(\"Request failed:\", error.message);\n      //   notify.error(error.message); // Display error message using notify\n      // throw { error: true, message: error };\n      return { error: true, message: error.message };\n    }\n  };\n\n  // Helper functions for each HTTP method\n  const get = (path, data) => request(\"GET\", path, data);\n  const put = (path, data) => request(\"PUT\", path, data);\n  const post = (path, data) => request(\"POST\", path, data);\n  const del = (path, data) => request(\"DELETE\", path, data);\n\n  return {\n    get,\n    put,\n    post,\n    del,\n  };\n})();\n\nexport default api;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Button,\n  Grid,\n  Typography,\n  Snackbar,\n} from \"@mui/material\";\nimport MuiAlert from \"@mui/material/Alert\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport TextField from \"@mui/material/TextField\";\nimport Paper from \"@mui/material/Paper\";\nimport Box from \"@mui/material/Box\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport API from \"../../API\";\n\nconst defaultTheme = createTheme();\n\nconst Form = () => {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    otp: \"\",\n  });\n\n  useEffect(() => {\n    // Check if token exists in local storage\n    const email = localStorage.getItem(\"email\");\n    const isVerify = localStorage.getItem(\"verify\");\n  \n    if (!isVerify) {\n      window.location.href = \"/home\";\n    }\n  \n    if (email) {\n      setFormData((prevFormData) => ({\n        ...prevFormData,\n        email: email,\n      }));\n    }\n  }, [setFormData]);  \n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n  const [error, setError] = useState(null);\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n\n  const handleSnackbarClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpenSnackbar(false);\n  };\n\n  const handleFormSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!formData.email) {\n      setError(\"Please provide an email address.\");\n      setOpenSnackbar(true);\n    } else {\n      // Clear error if present\n      setError(null);\n\n          try {\n            const res = await API.post(\"auth/create\", formData);\n            if (res.error) {\n              setError(res.message);\n              setOpenSnackbar(true);\n            } else {\n                localStorage.removeItem(\"verify\");\n              localStorage.setItem(\"role\", formData.role);\n            window.location.href = \"/\" + formData.role + \"/dashboard\";\n            }\n          } catch (error) {\n\n        }\n\n      // Reset form fields\n      setFormData({\n        otp: \"\",\n      });\n    }\n  };\n\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <Grid container component=\"main\" sx={{ height: \"95vh\" }}>\n        <CssBaseline />\n        <Grid\n          item\n          xs={false}\n          sm={4}\n          md={7}\n          sx={{\n            backgroundImage: `url(https://medonma.me/assets/images/banner1.jpg)`,\n            backgroundRepeat: \"no-repeat\",\n            backgroundColor: (t) =>\n              t.palette.mode === \"light\"\n                ? t.palette.grey[50]\n                : t.palette.grey[900],\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n          }}\n        />\n\n        <Grid item xs={6} sm={8} md={5} component={Paper} elevation={6} square>\n          <Box\n            sx={{\n              my: 8,\n              mx: 4,\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n            }}\n          >\n            <Typography component=\"h1\" variant=\"h5\">\n              {\"Verify otp\"}\n            </Typography>\n            <hr />\n\n            <Box\n              component=\"form\"\n              noValidate\n              onSubmit={handleFormSubmit}\n              sx={{ mt: 5 }}\n            >\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                value={formData.email}\n                onChange={handleChange}\n                autoFocus\n              />\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"otp\"\n                label=\"otp\"\n                type=\"number\"\n                value={formData.otp}\n                onChange={handleChange}\n                id=\"otp\"\n                autoComplete=\"otp\"\n              />\n\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2 }}\n              >\n                Submit\n              </Button>\n            </Box>\n\n            {/* Error Snackbar */}\n            <Snackbar\n              open={openSnackbar}\n              autoHideDuration={6000}\n              onClose={handleSnackbarClose}\n            >\n              <MuiAlert\n                elevation={6}\n                variant=\"filled\"\n                severity=\"error\"\n                onClose={handleSnackbarClose}\n              >\n                {error}\n              </MuiAlert>\n            </Snackbar>\n          </Box>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n  );\n};\n\nexport default Form;\n"],"names":["baseUrl","request","async","method","path","data","url","concat","token","localStorage","getItem","headers","options","body","JSON","stringify","queryParams","URLSearchParams","toString","response","fetch","json","error","console","message","get","put","post","del","defaultTheme","createTheme","Form","formData","setFormData","useState","email","otp","useEffect","window","location","href","prevFormData","handleChange","event","name","value","target","setError","openSnackbar","setOpenSnackbar","handleSnackbarClose","reason","_jsx","ThemeProvider","theme","children","_jsxs","Grid","container","component","sx","height","CssBaseline","item","xs","sm","md","backgroundImage","backgroundRepeat","backgroundColor","t","palette","mode","grey","backgroundSize","backgroundPosition","Paper","elevation","square","Box","my","mx","display","flexDirection","alignItems","Typography","variant","noValidate","onSubmit","e","preventDefault","res","API","removeItem","setItem","role","mt","TextField","margin","required","fullWidth","id","label","autoComplete","onChange","autoFocus","type","Button","mb","Snackbar","open","autoHideDuration","onClose","MuiAlert","severity"],"sourceRoot":""}